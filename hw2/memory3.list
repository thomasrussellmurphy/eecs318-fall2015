// Thomas Russell Murphy (trm70)
// EECS 318 Fall 2015
// Program and data for hw2, q4 testing implementation

// Data segment
// At memory location 0x000 we have a randomly generated value
0000_0000_0000_0000_1010_0001_1111_1100

// And again at 0x001
0000_0000_0000_0000_0001_1001_0111_0011

// Program segment
@100  // Starts at 12'h100

// Program for calculating the product of the values at mem[0] and mem[1]
// Does successive calculation of partial products and adds the partial
// products into an accumulator

// Load value at memory 0x000 into register 0x0
// LD _ no CC or src/dest _ (3) source zero _ (3) destination zero
0001_0000_0000_0000_0000_0000_0000_0000

// Load value at memory 0x001 into register 0x1
// LD _ no CC or src/dest _ (3) source zero _ (3) destination zero
0001_0000_0000_0000_0001_0000_0000_0001

// Add immediate value 32 into register 0x4 for loop counter
0101_1000_0000_0010_0000_0000_0000_0100

// Register 0x3 will be the (partial) product

// Setup external loop
@110  // Reference for this jump point
// If zero, jump to end
0011_0101_0000_0000_0000_0001_1111_1111
// else, jump to the multiplication internal loop
0011_0000_0000_0000_0000_0001_0001_1111

// Setup internal loop for partial multiplication
@120  // Reference for this jump point

// Add immediate value 0 into register 0x1 to check state
0101_1000_0000_0000_0000_0000_0000_0001

// If even (no 1 in LSB), jump to shift
0011_0010_0000_0000_0000_0001_0010_1111

// Fall through since there'd be a 1 in the LSB
// Adding the shifted first argument to the accumulator 0x0 into 0x3
0101_0000_0000_0000_0000_0000_0000_0011

// Unconditional jump to shift
0011_0000_0000_0000_0000_0001_0010_1111

// Shift here
@130  // Reference for this jump point
// Shifting register 0x1 right by 1 to get the next LSB
0111_0000_0000_0000_0001_0000_0000_0001
// Shift register 0x0 left by 1 to get next potential partial product
0111_0000_1111_1111_1111_0000_0000_0000

// Add immediate value -1 to register 0x4 for loop counter
0101_1000_1111_1111_1111_0000_0000_0100

// Jump to external loop start
0011_0000_0000_0000_0000_0001_0000_1111

// Write result and halt
@200  // reference for this jump point

// Store value at register 0x3 into memory 0x001
0010_0000_0000_0000_0011_0000_0000_0001

// Halt
1000_0000_0000_0000_0000_0000_0000_0000
